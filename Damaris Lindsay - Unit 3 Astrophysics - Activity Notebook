{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"},"colab":{"name":"Damaris Lindsay - Unit 3 Astrophysics - Activity Notebook","provenance":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"eLSMsHWtCKom"},"source":["# ðŸŸ¢Module 1: Analyzing lab data with pandas\n","\n","This module will walk you through the basics of **creating a pandas dataframe**. You'll use the data you collected in the distance vs brightness lab."]},{"cell_type":"markdown","metadata":{"id":"AcKS6D_6CKon"},"source":["First, let's import the pandas and matplotlib libraries:"]},{"cell_type":"code","metadata":{"id":"ZSUxH7NOCKoo"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8jLQzMX5CKoo"},"source":["Next, create 4 lists: 1 that contains your distance measurements and 3 that contain your brightness measurements from each experimental run."]},{"cell_type":"code","metadata":{"id":"PHczShHMCKop"},"source":["# Fill in the lists below\n","dist = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n","brt1 = [770, 770, 770, 395, 234, 158, 113, 85, 68, 53, 43]\n","brt2 = [770, 770, 770, 770, 389, 157, 131, 114, 86, 67, 54]\n","brt3 = [770, 770, 770, 381, 230, 157, 113, 85, 66, 53, 43]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e4sfft10CKoq"},"source":["Now we'll create a dataframe based on these lists using the pandas .DataFrame() function."]},{"cell_type":"code","metadata":{"id":"9nrnE0-uCKoq"},"source":["df = pd.DataFrame({ \"Distance\" : dist, \"Brightness 1\" : brt1, \"Brightness 2\": brt2, \"Brightness 3\": brt3})\n","\n","# See those {curly brackets}? This means we're using a special data type called a dictionary!"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3eRYQrGzCKor"},"source":["Look at the first 5 lines of our dataframe using the .head() function"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LMuHs5nhCKos","executionInfo":{"status":"ok","timestamp":1627392722775,"user_tz":240,"elapsed":45,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"999a49ea-8323-43fb-fd24-2f54a1dd0592"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Distance</th>\n","      <th>Brightness 1</th>\n","      <th>Brightness 2</th>\n","      <th>Brightness 3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>20</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>395</td>\n","      <td>770</td>\n","      <td>381</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>40</td>\n","      <td>234</td>\n","      <td>389</td>\n","      <td>230</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Distance  Brightness 1  Brightness 2  Brightness 3\n","0         0           770           770           770\n","1        10           770           770           770\n","2        20           770           770           770\n","3        30           395           770           381\n","4        40           234           389           230"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"KjX4OZAgCKos"},"source":["Notice that the strings we chose in the .DataFrame() function have become the column headers and the items from the lists are the column values. \n","\n","What order are the columns in?"]},{"cell_type":"markdown","metadata":{"id":"FQKFFFq4CKos"},"source":["## Working with data columns"]},{"cell_type":"markdown","metadata":{"id":"dSlQh2jjCKos"},"source":["Select just the \"brightness 1\" column and assign it to a variable."]},{"cell_type":"code","metadata":{"id":"6gthyY0RCKot"},"source":["brightness1 = df[\"Brightness 1\"]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YqkaPvIMCKot"},"source":["Use the .head() function to look at the first 10 values in this column."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DwbjUk9vCKot","executionInfo":{"status":"ok","timestamp":1627392722894,"user_tz":240,"elapsed":160,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"807b218c-3333-4781-8ec5-83376ba3f51a"},"source":["brightness1.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    770\n","1    770\n","2    770\n","3    395\n","4    234\n","5    158\n","6    113\n","7     85\n","8     68\n","9     53\n","Name: Brightness 1, dtype: int64"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"uxrLXCFZCKou"},"source":["Print out the min, max, and average value in this column:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bAeB_y2tCKou","executionInfo":{"status":"ok","timestamp":1627392722910,"user_tz":240,"elapsed":37,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"401b92f3-b482-4775-bf92-4e8c02292cbc"},"source":["# You may have used numpy functions for these calculations in the past, but have you tried pandas methods?\n","# Check your cheat sheet for details\n","print(brightness1.min())\n","print(brightness1.max())\n","print(brightness1.mean())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["43\n","770\n","314.45454545454544\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_iVkonw4CKou"},"source":["Use the .count() method to find out how many values are in the first brightness column:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cRMHFvLzCKou","executionInfo":{"status":"ok","timestamp":1627392722912,"user_tz":240,"elapsed":36,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"b63b137b-00c8-44e5-84b9-9759cfc2acc2"},"source":["brightness1.count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["11"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"OKNJZGHhCKov"},"source":["Now use the .sum() method to find the sum of all the values in this column:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"53Dg6FpyCKov","executionInfo":{"status":"ok","timestamp":1627392722914,"user_tz":240,"elapsed":36,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"8d026f02-0915-4dd1-80af-8fec8bd69ca2"},"source":["brightness1.sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3459"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"orLBLUJCCKow"},"source":["## Adding new data to your dataframe"]},{"cell_type":"markdown","metadata":{"id":"8QB4YREcCKow"},"source":["You have three columns for brightness, but we're interested in calculating the average.\n","\n","Let's add a new column to our dataframe that contains the average brightness value:"]},{"cell_type":"code","metadata":{"id":"hBHFklc9CKow"},"source":["#Sample: df[\"new column\"] = df[[\"col1\", \"col2\"].mean(axis=1)\n","\n","# Notes:\n","# \"new column\" is the name of the new column we are creating\n","# We are specifying which columns to average together using an index\n","# We're using the pandas .mean() method again!\n","# axis=1 specifies that pandas should find the mean across columns. \n","# (axis=0 would tell pandas to find the mean across rows)\n","\n","# write code to add an average brightness column below:\n","\n","df[\"Average Brightness\"] = df[[\"Brightness 1\", \"Brightness 2\", \"Brightness 3\"]].mean(axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"24abNcR6CKox"},"source":["Use the .head() method to check that you've successfully added the new column:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OsMaTfCrCKox","executionInfo":{"status":"ok","timestamp":1627392722918,"user_tz":240,"elapsed":35,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"8b10bde3-700b-4e13-ff10-8926d49f37f6"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Distance</th>\n","      <th>Brightness 1</th>\n","      <th>Brightness 2</th>\n","      <th>Brightness 3</th>\n","      <th>Average Brightness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>20</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>395</td>\n","      <td>770</td>\n","      <td>381</td>\n","      <td>515.333333</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>40</td>\n","      <td>234</td>\n","      <td>389</td>\n","      <td>230</td>\n","      <td>284.333333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Distance  Brightness 1  Brightness 2  Brightness 3  Average Brightness\n","0         0           770           770           770          770.000000\n","1        10           770           770           770          770.000000\n","2        20           770           770           770          770.000000\n","3        30           395           770           381          515.333333\n","4        40           234           389           230          284.333333"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"s8NwlGVzCKox"},"source":["Assign the \"avg brightness\" column to a new variable:"]},{"cell_type":"code","metadata":{"id":"EMH5VDndCKox"},"source":["avg_brightness = df[\"Average Brightness\"]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1yxIfdScCKox"},"source":["What is the data type of the \"avg brightness\" column? (Hint: use the .dtypes method)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FYfNWr0HCKox","executionInfo":{"status":"ok","timestamp":1627392722923,"user_tz":240,"elapsed":36,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"edb2b5b9-c9f8-4eaa-96da-0816031e2c89"},"source":["# Note that the .dtypes method doesn't use parentheses\n","avg_brightness.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('float64')"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"7NsQhv6bCKoy"},"source":["Let's compare this to the rest of the columns. (Hint: try running the .dtypes attribute on the whole dataframe)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GedeEchiCKoy","executionInfo":{"status":"ok","timestamp":1627392722925,"user_tz":240,"elapsed":34,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"54f446f0-0b94-4319-9e21-17fb5d451671"},"source":["df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Distance                int64\n","Brightness 1            int64\n","Brightness 2            int64\n","Brightness 3            int64\n","Average Brightness    float64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"markdown","metadata":{"id":"kyuZqCe7CKoy"},"source":["## Sorting your data"]},{"cell_type":"markdown","metadata":{"id":"KKVQufOvCKoy"},"source":["Now let's do some more data analysis using pandas. We can use the .sort_values() function to sort our data by average brightness."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n0gK7phtCKoy","executionInfo":{"status":"ok","timestamp":1627392723136,"user_tz":240,"elapsed":243,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"485c6aeb-8a51-43bd-cdf1-4768e5ac10ae"},"source":["df_sorted = df.sort_values([\"Average Brightness\"]) # specify the column that you want to use for the sort using an index\n","# Note that we need to assign the sorted dataframe to a new variable\n","\n","df_sorted.head(10) # Look at the first 10 lines of the sorted file"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Distance</th>\n","      <th>Brightness 1</th>\n","      <th>Brightness 2</th>\n","      <th>Brightness 3</th>\n","      <th>Average Brightness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>10</th>\n","      <td>100</td>\n","      <td>43</td>\n","      <td>54</td>\n","      <td>43</td>\n","      <td>46.666667</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>90</td>\n","      <td>53</td>\n","      <td>67</td>\n","      <td>53</td>\n","      <td>57.666667</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>80</td>\n","      <td>68</td>\n","      <td>86</td>\n","      <td>66</td>\n","      <td>73.333333</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>70</td>\n","      <td>85</td>\n","      <td>114</td>\n","      <td>85</td>\n","      <td>94.666667</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>60</td>\n","      <td>113</td>\n","      <td>131</td>\n","      <td>113</td>\n","      <td>119.000000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>50</td>\n","      <td>158</td>\n","      <td>157</td>\n","      <td>157</td>\n","      <td>157.333333</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>40</td>\n","      <td>234</td>\n","      <td>389</td>\n","      <td>230</td>\n","      <td>284.333333</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>395</td>\n","      <td>770</td>\n","      <td>381</td>\n","      <td>515.333333</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    Distance  Brightness 1  Brightness 2  Brightness 3  Average Brightness\n","10       100            43            54            43           46.666667\n","9         90            53            67            53           57.666667\n","8         80            68            86            66           73.333333\n","7         70            85           114            85           94.666667\n","6         60           113           131           113          119.000000\n","5         50           158           157           157          157.333333\n","4         40           234           389           230          284.333333\n","3         30           395           770           381          515.333333\n","0          0           770           770           770          770.000000\n","1         10           770           770           770          770.000000"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"markdown","metadata":{"id":"CUl_jlk6CKoz"},"source":["Look at the distances in this sorted dataframe. Do the lowest brightness values occur at large or small distances?\n","\n","What if we want to look at the highest brightness values? We can sort the data in reverse by adding another argument to the sort_values() function."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-3hdkzWrCKoz","executionInfo":{"status":"ok","timestamp":1627392723137,"user_tz":240,"elapsed":51,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"46ca8386-b1dc-4cdd-ea7b-95f3d915b7a2"},"source":["# set the ascending argument to False to sort values from highest to lowest\n","df_sorted = df.sort_values([\"Average Brightness\"], ascending = False)\n","# We will overwrite our original variable, but you could use a different variable here if you wanted\n","# to store multiple sorted dataframes\n","\n","df_sorted.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Distance</th>\n","      <th>Brightness 1</th>\n","      <th>Brightness 2</th>\n","      <th>Brightness 3</th>\n","      <th>Average Brightness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>20</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>395</td>\n","      <td>770</td>\n","      <td>381</td>\n","      <td>515.333333</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>40</td>\n","      <td>234</td>\n","      <td>389</td>\n","      <td>230</td>\n","      <td>284.333333</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>50</td>\n","      <td>158</td>\n","      <td>157</td>\n","      <td>157</td>\n","      <td>157.333333</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>60</td>\n","      <td>113</td>\n","      <td>131</td>\n","      <td>113</td>\n","      <td>119.000000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>70</td>\n","      <td>85</td>\n","      <td>114</td>\n","      <td>85</td>\n","      <td>94.666667</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>80</td>\n","      <td>68</td>\n","      <td>86</td>\n","      <td>66</td>\n","      <td>73.333333</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>90</td>\n","      <td>53</td>\n","      <td>67</td>\n","      <td>53</td>\n","      <td>57.666667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Distance  Brightness 1  Brightness 2  Brightness 3  Average Brightness\n","0         0           770           770           770          770.000000\n","1        10           770           770           770          770.000000\n","2        20           770           770           770          770.000000\n","3        30           395           770           381          515.333333\n","4        40           234           389           230          284.333333\n","5        50           158           157           157          157.333333\n","6        60           113           131           113          119.000000\n","7        70            85           114            85           94.666667\n","8        80            68            86            66           73.333333\n","9        90            53            67            53           57.666667"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"G1XgOSIwCKoz"},"source":["Are the distances associated with the largest brightness values large or small?"]},{"cell_type":"markdown","metadata":{"id":"qP7weawrCKoz"},"source":["Try it yourself! Sort the dataframe by distance (high to low) and look at the first 10 rows:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0D7mlPDTCKo0","executionInfo":{"status":"ok","timestamp":1627392723144,"user_tz":240,"elapsed":52,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"7c96961f-4816-43fe-ecfa-0ac3471d0497"},"source":["df_sorted = df.sort_values([\"Distance\"], ascending = False)\n","df_sorted.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Distance</th>\n","      <th>Brightness 1</th>\n","      <th>Brightness 2</th>\n","      <th>Brightness 3</th>\n","      <th>Average Brightness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>10</th>\n","      <td>100</td>\n","      <td>43</td>\n","      <td>54</td>\n","      <td>43</td>\n","      <td>46.666667</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>90</td>\n","      <td>53</td>\n","      <td>67</td>\n","      <td>53</td>\n","      <td>57.666667</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>80</td>\n","      <td>68</td>\n","      <td>86</td>\n","      <td>66</td>\n","      <td>73.333333</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>70</td>\n","      <td>85</td>\n","      <td>114</td>\n","      <td>85</td>\n","      <td>94.666667</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>60</td>\n","      <td>113</td>\n","      <td>131</td>\n","      <td>113</td>\n","      <td>119.000000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>50</td>\n","      <td>158</td>\n","      <td>157</td>\n","      <td>157</td>\n","      <td>157.333333</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>40</td>\n","      <td>234</td>\n","      <td>389</td>\n","      <td>230</td>\n","      <td>284.333333</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>395</td>\n","      <td>770</td>\n","      <td>381</td>\n","      <td>515.333333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>20</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770</td>\n","      <td>770.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    Distance  Brightness 1  Brightness 2  Brightness 3  Average Brightness\n","10       100            43            54            43           46.666667\n","9         90            53            67            53           57.666667\n","8         80            68            86            66           73.333333\n","7         70            85           114            85           94.666667\n","6         60           113           131           113          119.000000\n","5         50           158           157           157          157.333333\n","4         40           234           389           230          284.333333\n","3         30           395           770           381          515.333333\n","2         20           770           770           770          770.000000\n","1         10           770           770           770          770.000000"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"markdown","metadata":{"id":"PnIinLpuCKo0"},"source":["## Exporting your processed data"]},{"cell_type":"markdown","metadata":{"id":"Vx_5QquFCKo0"},"source":["You can export your dataframe to your computer as a csv using the .to_csv() function."]},{"cell_type":"code","metadata":{"id":"-v46713iCKo0"},"source":["df.to_csv(\"lab_averages.csv\", index=False) # index=False removes the index column (1, 2, 3...) from our dataset"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wPFlWgkWCKo0"},"source":["## Graphing our results"]},{"cell_type":"markdown","metadata":{"id":"BQAqiNUpCKo0"},"source":["Use matplotlib to graph your results. Try plt.scatter() and plt.plot(). What are the strengths and weaknesses of each type of graph?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_rhcANftCKo1","executionInfo":{"status":"ok","timestamp":1627392723491,"user_tz":240,"elapsed":396,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"d1aa2a3b-a2dd-45d4-9d2d-4d740ab853af"},"source":["# Note: try experimenting with the marker argument for your graphs\n","\n","plt.title(\"Brightness vs. Distance\")\n","plt.xlabel(\"Distance\")\n","plt.ylabel(\"Brightness\")\n","plt.scatter(dist, avg_brightness)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dpMFSOwaJFdl","executionInfo":{"status":"ok","timestamp":1627392723650,"user_tz":240,"elapsed":264,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"4eb0e8a8-1f4b-4521-aafc-30ec79702dff"},"source":["plt.title(\"Brightness vs. Distance\")\n","plt.xlabel(\"Distance\")\n","plt.ylabel(\"Brightness\")\n","plt.plot(dist, avg_brightness)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"zYuhMaI_CKo1"},"source":["# ðŸŸ¢Module 2: Clinometer activity Pt 1: Calculating the height of the planetarium\n","\n","Use this notebook to calculate the height of the Hayden Planetarium based on your measurements of distance and clinometer angle. "]},{"cell_type":"markdown","metadata":{"id":"WpTBdGF-CKo1"},"source":["We will use the numpy library for this activity. It includes lots of functions that make mathematical calculations easier. Import the library below:"]},{"cell_type":"code","metadata":{"id":"_iIeQ3ZmCKo2"},"source":["# Remember that numpy has the alias np\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yTsSDmIcCKo2"},"source":["Next, assign the clinometer angle you measured to a variable:"]},{"cell_type":"code","metadata":{"id":"MXipnJqSCKo2"},"source":["# remember to think carefully about the datatype of your value\n","degrees = 30"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kDiLTFgACKo2"},"source":["We can use the numpy function np.deg2rad() to convert our angle from degrees to radians, which we will need for our calculations later on. \n","\n","The np.deg2rad() function takes an angle in degrees as an argument and returns that angle in radians.\n","\n","Calculate your angle in radians and assign it to a new variable. Then print out the value:"]},{"cell_type":"code","metadata":{"id":"6MJMh58vCKo3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627393415733,"user_tz":240,"elapsed":147,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"b5764d82-2779-4c99-ef5f-174447b647b8"},"source":["# Remember to use the variable you created above.\n","angle_radians = np.deg2rad(degrees)\n","print(angle_radians)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.5235987755982988\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eOKelWmBCKo3"},"source":["#### Now it's time to find the height of the planetarium!\n","\n","First, fill in the distance from the observer to the planetarium base (adjacent side):"]},{"cell_type":"code","metadata":{"id":"DB2i034XCKo3"},"source":["# Assign the distance in meters to this variable\n","adj = 52.35987756"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9N7tNiGMCKo4"},"source":["Since we know theta and the length of the adjacent side of our triangle, we can use trigonometry to calculate the opposite side.\n","\n","Remember that tan(theta) = opposite/adjacent\n","\n","Use the numpy function np.tan() to calculate the length of \"opposite\" side of the triangle:"]},{"cell_type":"code","metadata":{"id":"cyFYZSiSCKo4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627393844983,"user_tz":240,"elapsed":136,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"0ebfc9bd-4a16-4abb-ddab-158833ca3986"},"source":["opp = np.tan(angle_radians) * adj\n","print(opp)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["30.229989404001845\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QBKexlLKCKo4"},"source":["But there's something missing! You need to add your own height to the length of the opposite side to get the height of the planetarium. \n","\n","Add your height in meters to the opposite side and store this value in a new variable:"]},{"cell_type":"code","metadata":{"id":"8nWeyyEgCKo5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627394089914,"user_tz":240,"elapsed":150,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"d7c0f9f0-c1e6-47a1-d459-3008a2787671"},"source":["building_height = 1.549399163 + opp\n","print(building_height)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["31.779388567001845\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c_LKy3KaCKo5"},"source":["Now print out a sentence that says \"The Hayden Planetarium is X meters tall!\" using the variable you just created:"]},{"cell_type":"code","metadata":{"id":"AyPjOszYCKo5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627394257326,"user_tz":240,"elapsed":158,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"32b3ba8e-a933-440e-f2bf-2ce8272cf915"},"source":["print (\"The Hayden Planetarium is\", round(building_height, 2), \"meters tall\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The Hayden Planetarium is 31.78 meters tall\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RVwsdPNpCKo7"},"source":["### Congratulations! \n","\n","Now what if you wanted to repeat these calculations for the entire class and find the average building height? How would you do that?\n","\n","If you were thinking pandas... you're right! Let's move on to part two of the activity."]},{"cell_type":"markdown","metadata":{"id":"WluVduT7CKo7"},"source":["# ðŸŸ¢Module 3: Clinometer activity Pt 2: Calculating the class average\n","\n","In this notebook you'll create a pandas dataframe with data from the entire class. You will practice using pandas functions and learn how to convert a CSV file to a pandas dataframe."]},{"cell_type":"markdown","metadata":{"id":"0_253laOCKo7"},"source":["Start by importing pandas and numpy"]},{"cell_type":"code","metadata":{"id":"N1iD1dDBCKo7"},"source":["import pandas as pd\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z5ocVhDzCKo8"},"source":["Next, let's open our data file and convert it to a pandas dataframe. \n","\n","This time our dataset is in a CSV file so we can use the pd.read_csv() function:"]},{"cell_type":"code","metadata":{"id":"8YeGci5NCKpE"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/sample_clinometer_data.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gR9ysi4-CKpF"},"source":["Let's take a look at the data! Find the first 5 rows of data:"]},{"cell_type":"code","metadata":{"id":"Zd21Stx8CKpF","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1627394527504,"user_tz":240,"elapsed":199,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"8b0382ad-9219-4d8c-d284-9f2b3640fcb9"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>student height</th>\n","      <th>distance to bldg</th>\n","      <th>clinometer angle</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.549399</td>\n","      <td>52.120772</td>\n","      <td>35.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.625599</td>\n","      <td>52.120772</td>\n","      <td>35.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.650991</td>\n","      <td>52.120772</td>\n","      <td>20.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.729720</td>\n","      <td>52.578483</td>\n","      <td>20.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.549400</td>\n","      <td>52.120772</td>\n","      <td>20.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   student height  distance to bldg  clinometer angle\n","0        1.549399         52.120772              35.0\n","1        1.625599         52.120772              35.0\n","2        1.650991         52.120772              20.0\n","3        1.729720         52.578483              20.0\n","4        1.549400         52.120772              20.0"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"markdown","metadata":{"id":"I3H7x3SXCKpF"},"source":["Now check the data type of all the columns in the dataframe:"]},{"cell_type":"code","metadata":{"id":"4mdIK95OCKpG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627394533136,"user_tz":240,"elapsed":159,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"7338e3f4-1e8e-45fd-86bd-6f74541f5e2f"},"source":["df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["student height      float64\n","distance to bldg    float64\n","clinometer angle    float64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"markdown","metadata":{"id":"6cHeTUFLCKpG"},"source":["The first column contains the height of everyone in the class.\n","\n","Isolate this column using an index and assign it to a variable. Hint: You'll need to include the column name in the index."]},{"cell_type":"code","metadata":{"id":"0_JGbkHCCKpH"},"source":["student_height = df[\"student height\"]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pEDjMOHVCKpH"},"source":["Now, print out the average class height:"]},{"cell_type":"code","metadata":{"id":"GVXu6-W8CKpI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627394725840,"user_tz":240,"elapsed":175,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"61bcb8a1-6609-433b-8e9f-2a669681820a"},"source":["student_height.mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.59537533525"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"markdown","metadata":{"id":"2CSjwmwaCKpI"},"source":["## Adding columns: calculating theta\n","To make our data useful, we need to add some more columns. Let's create a column for theta first.\n","\n","Recall that theta = np.deg2rad(degrees)."]},{"cell_type":"code","metadata":{"id":"clzJP3pvCKpI"},"source":["# Create a new column called \"theta\" \n","# Hint: You will need to use a dataframe index as the argument for the np.deg2rad() function.\n","df[\"theta\"] = np.deg2rad(df[\"clinometer angle\"])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZBm0zxW2CKpJ"},"source":["Check to make sure that you've added your new column correctly:"]},{"cell_type":"code","metadata":{"id":"3W8fITajCKpJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627396563963,"user_tz":240,"elapsed":164,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"0b3a8d72-05d0-4428-99d8-9fc4a9a4ecd7"},"source":["df[\"theta\"]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     0.610865\n","1     0.610865\n","2     0.349066\n","3     0.349066\n","4     0.349066\n","5     0.523599\n","6     0.523599\n","7     0.523599\n","8     0.523599\n","9     0.436332\n","10    0.436332\n","11    0.610865\n","12    0.436332\n","13    0.488692\n","14    0.558505\n","15    0.575959\n","16    0.488692\n","17    0.352557\n","18    0.523599\n","19    0.523599\n","Name: theta, dtype: float64"]},"metadata":{"tags":[]},"execution_count":107}]},{"cell_type":"markdown","metadata":{"id":"zlmLtBPjCKpJ"},"source":["Next, let's add a \"building height\" column. \n","\n","Remember that opposite = adjacent * np.tan(theta) and that the building height is opposite + student height."]},{"cell_type":"code","metadata":{"id":"S2_252IHCKpJ"},"source":["# Create a new column called \"building height\"\n","# Hint: You will need to use THREE dataframe indexes to define this column\n","df[\"building height\"] = df[\"distance to bldg\"] * np.tan(df[\"theta\"]) + df[\"student height\"]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GzlsUDvKCKpK"},"source":["Check to make sure that you've added your new column correctly:"]},{"cell_type":"code","metadata":{"id":"_HEYyjgNCKpK"},"source":["df[\"building height\"]\n","building_height = df[\"building height\"]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d21mYSadCKpK"},"source":["Now, find the average planetarium height for the entire class:"]},{"cell_type":"code","metadata":{"id":"3f58nC6GCKpK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627397998561,"user_tz":240,"elapsed":122,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"5d2c90c4-7e4a-425f-a75d-f9a5491e17e9"},"source":["building_height.mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["29.675378724413974"]},"metadata":{"tags":[]},"execution_count":113}]},{"cell_type":"markdown","metadata":{"id":"LcTC2M_4CKpL"},"source":["# ðŸŸ¢Module 4: Studying the stars with Gaia and pandas\n","\n","The Tycho-Gaia Astrometric Solution (TGAS) is a collection of 2.5 million stars identified by the Gaia astronomical observatory, a spacecraft launched in 2013. In this notebook, you will practice your pandas skills with a fraction of that dataset."]},{"cell_type":"markdown","metadata":{"id":"leey7w0HCKpL"},"source":["First, import pandas and matplotlib.pyplot:"]},{"cell_type":"code","metadata":{"id":"wxc1ig4qCKpL"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4BI8T18cCKpL"},"source":["Now, open the \"TGAS_data.csv\" file:"]},{"cell_type":"code","metadata":{"id":"frRUxmYdCKpM"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/TGAS_data.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f10S3F8oCKpM"},"source":["Look at the first five rows of the dataframe:"]},{"cell_type":"code","metadata":{"id":"dXl8ZdLJCKpM","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1627399191578,"user_tz":240,"elapsed":32,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"554f4038-023f-4c6a-9775-5f6bbbed604c"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TYC2 ID</th>\n","      <th>Epoch</th>\n","      <th>RA (deg)</th>\n","      <th>RA err (mas)</th>\n","      <th>Dec (deg)</th>\n","      <th>Dec err (mas)</th>\n","      <th>Parallax (mas)</th>\n","      <th>Parallax err (mas)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1-1001-1</td>\n","      <td>2015</td>\n","      <td>1.414659</td>\n","      <td>0.483</td>\n","      <td>2.448821</td>\n","      <td>0.249</td>\n","      <td>2.96</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1-1009-1</td>\n","      <td>2015</td>\n","      <td>0.137272</td>\n","      <td>0.453</td>\n","      <td>0.721016</td>\n","      <td>0.195</td>\n","      <td>5.77</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1-1016-1</td>\n","      <td>2015</td>\n","      <td>0.426679</td>\n","      <td>0.456</td>\n","      <td>1.786809</td>\n","      <td>0.169</td>\n","      <td>2.66</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1-1021-1</td>\n","      <td>2015</td>\n","      <td>0.484126</td>\n","      <td>0.388</td>\n","      <td>0.434794</td>\n","      <td>0.151</td>\n","      <td>3.16</td>\n","      <td>0.52</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1-1024-1</td>\n","      <td>2015</td>\n","      <td>1.080285</td>\n","      <td>0.347</td>\n","      <td>0.875576</td>\n","      <td>0.124</td>\n","      <td>2.63</td>\n","      <td>0.46</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        TYC2 ID  Epoch  ...  Parallax (mas)  Parallax err (mas)\n","0  1-1001-1       2015  ...            2.96                0.59\n","1  1-1009-1       2015  ...            5.77                0.73\n","2  1-1016-1       2015  ...            2.66                0.59\n","3  1-1021-1       2015  ...            3.16                0.52\n","4  1-1024-1       2015  ...            2.63                0.46\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":117}]},{"cell_type":"markdown","metadata":{"id":"dJ4cN4pRCKpM"},"source":["How many rows are there in this dataframe?"]},{"cell_type":"code","metadata":{"id":"MVciAKkxCKpM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627399212053,"user_tz":240,"elapsed":197,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"68ededb4-dc81-45cc-e973-9400cfec62c2"},"source":["len(df)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["993037"]},"metadata":{"tags":[]},"execution_count":118}]},{"cell_type":"markdown","metadata":{"id":"L-l9nHfbCKpM"},"source":["You might notice that one of the columns contains the parallax angle for each star (remember: nearby objects have a larger parallax angle than far away objects).\n","\n","Store the \"parallax\" column in a variable."]},{"cell_type":"code","metadata":{"id":"gLgt8a1zCKpN"},"source":["parallax = df[\"Parallax (mas)\"]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RWToPT1SCKpN"},"source":["Find the min, max, and mean parallax angle for this dataset:"]},{"cell_type":"code","metadata":{"id":"R4shlhlxCKpN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627399378491,"user_tz":240,"elapsed":141,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"0c8f1b10-9781-4565-d6ec-5cb37c3e0cd0"},"source":["print(parallax.min())\n","print(parallax.max())\n","print(parallax.mean())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["-24.82\n","120.59\n","2.4250942311313683\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"WgkPYmC3CKpN"},"source":["Sort the entire dataframe by parallax angle from largest to smallest and print out the first 10 rows of the sorted dataframe."]},{"cell_type":"code","metadata":{"id":"HaUvyBLPCKpN","colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"status":"ok","timestamp":1627399633515,"user_tz":240,"elapsed":652,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"ce6166a7-8e82-476a-c393-8780fd74e28c"},"source":["# Remember to assign your sorted dataframe to a new variable\n","sorted_parallax = df.sort_values([\"Parallax (mas)\"], ascending = False)\n","sorted_parallax.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TYC2 ID</th>\n","      <th>Epoch</th>\n","      <th>RA (deg)</th>\n","      <th>RA err (mas)</th>\n","      <th>Dec (deg)</th>\n","      <th>Dec err (mas)</th>\n","      <th>Parallax (mas)</th>\n","      <th>Parallax err (mas)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>600536</th>\n","      <td>3980-1081-1</td>\n","      <td>2015</td>\n","      <td>327.909017</td>\n","      <td>0.768</td>\n","      <td>59.294450</td>\n","      <td>0.785</td>\n","      <td>120.59</td>\n","      <td>0.96</td>\n","    </tr>\n","    <tr>\n","      <th>696461</th>\n","      <td>4378-2162-2</td>\n","      <td>2015</td>\n","      <td>133.836686</td>\n","      <td>0.381</td>\n","      <td>70.792196</td>\n","      <td>0.518</td>\n","      <td>87.54</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>626905</th>\n","      <td>4041-1365-1</td>\n","      <td>2015</td>\n","      <td>30.394817</td>\n","      <td>0.228</td>\n","      <td>63.769605</td>\n","      <td>0.236</td>\n","      <td>84.54</td>\n","      <td>0.30</td>\n","    </tr>\n","    <tr>\n","      <th>696460</th>\n","      <td>4378-2162-1</td>\n","      <td>2015</td>\n","      <td>133.836474</td>\n","      <td>0.597</td>\n","      <td>70.793037</td>\n","      <td>0.851</td>\n","      <td>81.89</td>\n","      <td>0.96</td>\n","    </tr>\n","    <tr>\n","      <th>633075</th>\n","      <td>4067-242-1</td>\n","      <td>2015</td>\n","      <td>58.293768</td>\n","      <td>0.845</td>\n","      <td>62.567786</td>\n","      <td>0.341</td>\n","      <td>81.24</td>\n","      <td>0.47</td>\n","    </tr>\n","    <tr>\n","      <th>745577</th>\n","      <td>4618-116-1</td>\n","      <td>2015</td>\n","      <td>109.990312</td>\n","      <td>0.334</td>\n","      <td>84.076924</td>\n","      <td>0.514</td>\n","      <td>80.16</td>\n","      <td>0.66</td>\n","    </tr>\n","    <tr>\n","      <th>906485</th>\n","      <td>6403-440-1</td>\n","      <td>2015</td>\n","      <td>354.532769</td>\n","      <td>0.421</td>\n","      <td>-16.236492</td>\n","      <td>0.307</td>\n","      <td>78.56</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>565736</th>\n","      <td>3819-1043-1</td>\n","      <td>2015</td>\n","      <td>157.604095</td>\n","      <td>0.148</td>\n","      <td>55.998993</td>\n","      <td>0.328</td>\n","      <td>77.41</td>\n","      <td>0.27</td>\n","    </tr>\n","    <tr>\n","      <th>695664</th>\n","      <td>4375-2402-1</td>\n","      <td>2015</td>\n","      <td>128.944995</td>\n","      <td>0.226</td>\n","      <td>68.066859</td>\n","      <td>0.276</td>\n","      <td>76.94</td>\n","      <td>0.38</td>\n","    </tr>\n","    <tr>\n","      <th>786708</th>\n","      <td>4835-774-1</td>\n","      <td>2015</td>\n","      <td>115.012365</td>\n","      <td>0.362</td>\n","      <td>-3.604870</td>\n","      <td>0.221</td>\n","      <td>71.17</td>\n","      <td>0.36</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             TYC2 ID  Epoch  ...  Parallax (mas)  Parallax err (mas)\n","600536  3980-1081-1    2015  ...          120.59                0.96\n","696461  4378-2162-2    2015  ...           87.54                0.59\n","626905  4041-1365-1    2015  ...           84.54                0.30\n","696460  4378-2162-1    2015  ...           81.89                0.96\n","633075  4067-242-1     2015  ...           81.24                0.47\n","745577  4618-116-1     2015  ...           80.16                0.66\n","906485  6403-440-1     2015  ...           78.56                0.80\n","565736  3819-1043-1    2015  ...           77.41                0.27\n","695664  4375-2402-1    2015  ...           76.94                0.38\n","786708  4835-774-1     2015  ...           71.17                0.36\n","\n","[10 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":129}]},{"cell_type":"markdown","metadata":{"id":"PA1ao6yoCKpO"},"source":["## Selecting a particular value in a dataframe\n","You can index a single item from a row of the dataframe by specifying the column and then the row index as follows:"]},{"cell_type":"code","metadata":{"id":"1_kAf59bCKpO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627399651253,"user_tz":240,"elapsed":125,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"1bc7edff-ed0e-4862-ee3b-60919c9bbb3b"},"source":["# This code will select the Parallax from the star in row ID 600536\n","df[\"Parallax (mas)\"][600536] "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["120.59"]},"metadata":{"tags":[]},"execution_count":130}]},{"cell_type":"markdown","metadata":{"id":"AEuyTPF4CKpO"},"source":["Try it yourself! Find the Parallax angle for the star in row index 1."]},{"cell_type":"code","metadata":{"id":"lPlNjhPeCKpP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627399745417,"user_tz":240,"elapsed":159,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"9ec3a51e-15cf-416a-9995-4c8b0f66d863"},"source":["# Use the following format: df[column name/variable][row index]\n","df[\"Parallax (mas)\"][1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.77"]},"metadata":{"tags":[]},"execution_count":132}]},{"cell_type":"markdown","metadata":{"id":"317u6HhNCKpP"},"source":["Now find the TYC2 ID for this star\""]},{"cell_type":"code","metadata":{"id":"HB7eLT-1CKpQ","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1627399776724,"user_tz":240,"elapsed":165,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"65ca63ec-f2c6-4710-9de6-4f807027a056"},"source":["df[\"TYC2 ID\"][1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'1-1009-1    '"]},"metadata":{"tags":[]},"execution_count":133}]},{"cell_type":"markdown","metadata":{"id":"B64o2Mk1CKpQ"},"source":["## Let's calculate the distance to these stars based on their parallax angle\n","The parallax angle in this database is measured in milliarcseconds (mas). Add a column called \"Distance (par)\" using the following formula to calculate distance in parsecs: \n","\n","distance (par) = 1 / (parallax/1000)"]},{"cell_type":"code","metadata":{"id":"2ufgXum9CKpS"},"source":["df[\"Distance (par)\"] = 1 / (parallax/1000)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xtvhr8lxCKpS"},"source":["Check your dataframe using the .head() method:"]},{"cell_type":"code","metadata":{"id":"PKirWP3-CKpT","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1627399850375,"user_tz":240,"elapsed":193,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"5282546f-355d-402f-cfd4-5b4f0075f503"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TYC2 ID</th>\n","      <th>Epoch</th>\n","      <th>RA (deg)</th>\n","      <th>RA err (mas)</th>\n","      <th>Dec (deg)</th>\n","      <th>Dec err (mas)</th>\n","      <th>Parallax (mas)</th>\n","      <th>Parallax err (mas)</th>\n","      <th>Distance (par)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1-1001-1</td>\n","      <td>2015</td>\n","      <td>1.414659</td>\n","      <td>0.483</td>\n","      <td>2.448821</td>\n","      <td>0.249</td>\n","      <td>2.96</td>\n","      <td>0.59</td>\n","      <td>337.837838</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1-1009-1</td>\n","      <td>2015</td>\n","      <td>0.137272</td>\n","      <td>0.453</td>\n","      <td>0.721016</td>\n","      <td>0.195</td>\n","      <td>5.77</td>\n","      <td>0.73</td>\n","      <td>173.310225</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1-1016-1</td>\n","      <td>2015</td>\n","      <td>0.426679</td>\n","      <td>0.456</td>\n","      <td>1.786809</td>\n","      <td>0.169</td>\n","      <td>2.66</td>\n","      <td>0.59</td>\n","      <td>375.939850</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1-1021-1</td>\n","      <td>2015</td>\n","      <td>0.484126</td>\n","      <td>0.388</td>\n","      <td>0.434794</td>\n","      <td>0.151</td>\n","      <td>3.16</td>\n","      <td>0.52</td>\n","      <td>316.455696</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1-1024-1</td>\n","      <td>2015</td>\n","      <td>1.080285</td>\n","      <td>0.347</td>\n","      <td>0.875576</td>\n","      <td>0.124</td>\n","      <td>2.63</td>\n","      <td>0.46</td>\n","      <td>380.228137</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        TYC2 ID  Epoch  ...  Parallax err (mas)  Distance (par)\n","0  1-1001-1       2015  ...                0.59      337.837838\n","1  1-1009-1       2015  ...                0.73      173.310225\n","2  1-1016-1       2015  ...                0.59      375.939850\n","3  1-1021-1       2015  ...                0.52      316.455696\n","4  1-1024-1       2015  ...                0.46      380.228137\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":135}]},{"cell_type":"markdown","metadata":{"id":"khsLf5DnCKpT"},"source":["Find the min, max, and average distance:"]},{"cell_type":"code","metadata":{"id":"tJxg7GSVCKpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627399927829,"user_tz":240,"elapsed":169,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"94173258-9b8c-4da5-a814-cff27c9e3f6d"},"source":["distance = df[\"Distance (par)\"]\n","print(distance.min())\n","print(distance.max())\n","print(distance.mean())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["-99999.99999999999\n","99999.99999999999\n","747.2266340679466\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MgH8M2y1CKpT"},"source":["Why are there negative distances? Can you find anything in the data that could explain this?"]},{"cell_type":"markdown","metadata":{"id":"DMHmnKwgCKpU"},"source":["## Looking at the distribution of distances\n","The mean is helpful when it comes to learning about the average distance in parsecs to the stars we can measure with Gaia, but it doesn't give us the whole picture. Let's create a graph called a \"histogram\" that shows us how many stars have distances in each range.\n","\n","There's a simple matplotlib.pyplot function for this called plt.hist()\n","\n","The plt.hist() function takes three arguments: \n","- The dataframe index (or variable) that you want to look at\n","- *optional* The number of ranges\n","- *optional* (x min, x max)"]},{"cell_type":"code","metadata":{"id":"buDDucPwCKpU","colab":{"base_uri":"https://localhost:8080/","height":276},"executionInfo":{"status":"ok","timestamp":1627401086938,"user_tz":240,"elapsed":343,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"67a12290-fa4f-4f35-bfb5-47ac43cf7b31"},"source":["# First let's try the simplest version. Just use the dataframe index or variable for the distance column:\n","# Don't use the other two arguments for now:\n","plt.hist(distance)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"tU6Mwo77CKpU","colab":{"base_uri":"https://localhost:8080/","height":276},"executionInfo":{"status":"ok","timestamp":1627401090669,"user_tz":240,"elapsed":334,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"d0b2e35a-5b10-45d2-c581-6ca0c475a048"},"source":["# We can split the data up into more ranges if we specify a number. Try adding 20 as the second argument:\n","plt.hist(distance, 20)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"0fi-8tCbCKpU","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1627401094152,"user_tz":240,"elapsed":322,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"c43c2a00-fe0a-41c2-f80b-5fdb3a976223"},"source":["# There are so few stars in the very negative and very positive distances that it's skewing our results.\n","# Let's try specifying a min and max range of (-100, 4000)\n","plt.hist(distance, 20, (-100, 4000))\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"jyfevK6zCKpU"},"source":["# ðŸŸ¢Module 5: Making an HR Diagram\n","\n","In this Notebook, we'll use pandas and matplotlib to create a Hertzsprungâ€“Russell (HR) diagram with the information we collected about stars.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BvRiYwvoCKpV"},"source":["First, import pandas and matplotlib.pyplot"]},{"cell_type":"code","metadata":{"id":"DgIRUvXzCKpV","executionInfo":{"status":"ok","timestamp":1627565870173,"user_tz":240,"elapsed":148,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}}},"source":["import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dvlo7MsACKpV"},"source":["Next, run the following cell to import another matplotlib library and modify the way Jupyter displays graphs:"]},{"cell_type":"code","metadata":{"id":"JfhA3CX4CKpV","executionInfo":{"status":"ok","timestamp":1627565877408,"user_tz":240,"elapsed":135,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}}},"source":["import matplotlib.colors as mpl # We'll use the matplotlib.colors library to color our data points\n","%matplotlib inline \n","# This command changes the matplotlib viewer that Jupyter notebook uses and allows us to make fancier graphs"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PHEUfQVWCKpV"},"source":["Now, open the \"class_star_data.csv\" file:"]},{"cell_type":"code","metadata":{"id":"u_WWG4hbCKpV","executionInfo":{"status":"ok","timestamp":1627565989075,"user_tz":240,"elapsed":479,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}}},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/sample_class_star_data.csv\")"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qeY1dtiECKpW"},"source":["Look at the first five rows of the dataframe:"]},{"cell_type":"code","metadata":{"id":"xLuHeKzsCKpW","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1627565997666,"user_tz":240,"elapsed":303,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"ae0fcc8a-90ab-42c4-92cb-c9cc989e56ff"},"source":["df.head()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>star ID</th>\n","      <th>Brightness (suns)</th>\n","      <th>Temperature (K)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>132.0</td>\n","      <td>22000.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>9000.0</td>\n","      <td>3000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.5</td>\n","      <td>5200.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>70.0</td>\n","      <td>15000.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>60000.0</td>\n","      <td>6000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   star ID  Brightness (suns)  Temperature (K)\n","0        1              132.0          22000.0\n","1        2             9000.0           3000.0\n","2        3                0.5           5200.0\n","3        4               70.0          15000.0\n","4        5            60000.0           6000.0"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"dpryTN5YCKpW"},"source":["How many stars are in our dataset?"]},{"cell_type":"code","metadata":{"id":"4O6hG-ajCKpW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627566008182,"user_tz":240,"elapsed":123,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"1f646109-a9bd-4708-e188-c870e8e1e073"},"source":["len(df)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["96"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"Ug5apIciCKpW"},"source":["### Let's explore the data a bit.\n","\n","\n","Store the \"Brightness (suns)\" column and the \"Temperature (K)\" columns in variables."]},{"cell_type":"code","metadata":{"id":"-TKurciiCKpX","executionInfo":{"status":"ok","timestamp":1627566770940,"user_tz":240,"elapsed":149,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}}},"source":["B = df[\"Brightness (suns)\"]\n","T = df[\"Temperature (K)\"]"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O4K6PdUlCKpX"},"source":["Print out the mean brightness and temperature."]},{"cell_type":"code","metadata":{"id":"LLH57tAfCKpX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627566772680,"user_tz":240,"elapsed":231,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"e48e9320-01d0-4d8d-ca11-82dbb8980d67"},"source":["print(B.mean())\n","print(T.mean())"],"execution_count":16,"outputs":[{"output_type":"stream","text":["965.2636905208336\n","7238.541667395834\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kW22nzI6CKpY"},"source":["How do these values compare to the brightness and temperature of the sun?\n","\n","Print out the brightness and temperature of the sun. \n","\n","Hint: Use an index! The sun's star ID is 25, making its dataframe index 24. "]},{"cell_type":"code","metadata":{"id":"2ZJ-1NUaCKpY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627566774029,"user_tz":240,"elapsed":17,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"5d10a586-7bc7-4777-f4f2-75ec70755af9"},"source":["print(B[24])\n","print(T[24])"],"execution_count":17,"outputs":[{"output_type":"stream","text":["1.0\n","4800.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ofBg-9LKCKpY"},"source":["### Now let's make an HR diagram!\n","\n","Run the code below and look at it together. As a group, write comments that explain what each line does. If you have any questions, jot them down and we'll discuss them as a class."]},{"cell_type":"code","metadata":{"id":"QgZaFbY8CKpY","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1627566777573,"user_tz":240,"elapsed":1754,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"c0d0c3ba-92e9-44b7-9321-eda5e7e8f45d"},"source":["cm = plt.cm.get_cmap(\"RdYlBu\")\n","plt.scatter(T, B, c=B, s=35, cmap=cm, norm=mpl.LogNorm())\n","plt.scatter(T[24], B[24], c='magenta', s=200, marker='*') \n","plt.yscale('log')\n","plt.ylim([0.000001, 1000000])\n","plt.xlabel('Temperature (K)')\n","plt.ylabel('Brightness (Suns)')\n","plt.title('HR Diagram')\n","plt.gca().invert_xaxis()\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"lahBdIfHCKpY"},"source":["## ðŸŸ¢Module 6: The Cultural-Societal Impact of the Lack of Access to Home Broadband\n","\n","Electromagnetic waves that have wavelengths that are larger than 1mm in length are typically called radio waves. These wavelengths are used for communication between mobile phones, radio stations, Bluetooth devices, and of course radio stations.\n","\n","Radio astronomers developed an understanding of radio waves, which provided huge advantage for the development of the high-speed WI-FI standard. In the early 1990â€™s, WI-FI speed was limited by errors created from the signal bouncing and echoing off walls and objects of a room. This problem was made worse when a lot of information was sent across a single pure tone (single frequency) sine-like radio waves, limiting the possible data WI-FI data rate. However, it was found that by spreading the load of information across the radio band, the echo was reduced. It was not until the mid 2000s that this standard had become main-stream in WI-FI technology.\n","\n","\n","In modern times, Wi-Fi is crucial to everyday activities whether it be work, school, or retail. But, who has access to Wi-Fi and who doesn't? Create a dataframe using the following access-based-on-income vs. time data, and create a scatter plot that visualizes how they compare.\n","\n","Source: https://www.pewresearch.org/internet/fact-sheet/internet-broadband/?menuItem=2ab2b0be-6364-4d3a-8db7-ae134dbc05cd\n","\n"]},{"cell_type":"code","metadata":{"id":"2Ngy1qmbCKpZ"},"source":["#Import necessary libraries\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JlodnwR7CKpZ"},"source":["#Read in data.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oifCykZ3CKpZ"},"source":["#Store column data in variables.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EgnZHF_kCKpZ"},"source":["#Plot information\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-L75EQjtCKpa"},"source":["Answer the following questions:\n","\n","1. What income group of households has the greatest access to internet? The smallest?\n","\n","2. True or False: Equality exists because everyone has the opportunity to pay for internet access in their household. <br> Explain your thoughts.\n","\n","3. What are some ways that we can use our computer science skills to boost access of lower-income households to a stable high-speed internet connection?"]},{"cell_type":"code","metadata":{"id":"DscOq95ECKpa"},"source":[""],"execution_count":null,"outputs":[]}]}