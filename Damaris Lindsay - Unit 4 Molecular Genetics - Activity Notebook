{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Damaris Lindsay - Unit 4 Molecular Genetics - Activity Notebook","provenance":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"fAugZR92KIuC"},"source":["# ðŸŸ¢ Module 1: Making a Lab Material Dictionary\n","\n","Dictionaries are a convenient way of storing data in Python.  A dictionary in Python is like a dictionary in the real world.  \n","\n","In the real world, a dictionary consists of **words** and their **definitions**. In Python, a dictionary consists of **keys** and their **values**.\n","\n","In this Jupyter notebook you will use this new data type to organize all the materials from our strawberry DNA extraction lab."]},{"cell_type":"markdown","metadata":{"id":"6xvfmCzrKIuK"},"source":["### Use this cell for the live code session:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RO8gB0MVKIuL","executionInfo":{"elapsed":143,"status":"ok","timestamp":1627913043105,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"6b3cc16b-fa25-4325-cd9e-a115aba655f4"},"source":["analogyDict = {\"DNA\": \"cookbook\", \"RNA\": \"recipe\", \"protein\": \"food\"}\n","print(analogyDict[\"RNA\"])\n","\n","subunitDict = {\"DNA\": \"nucleotides\", \"RNA\": \"nucleotides\", \"protein\": \"amino acids\"}\n","print(subunitDict[\"DNA\"])\n","print(subunitDict[\"RNA\"])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["recipe\n","nucleotides\n","nucleotides\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vPBNub5lKIuM"},"source":["### Run the following cells to learn more about dictionaries:"]},{"cell_type":"code","metadata":{"id":"Ni43SUeeKIuM"},"source":["# We will create a new dictionary\n","switchDict = {0:\"off\", 1:\"on\"} # Notice that you can use integers as keys and strings as values if you want"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1YZiTgndKIuN","executionInfo":{"elapsed":218,"status":"ok","timestamp":1627913189831,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"407b4e35-f445-42e1-ca39-72a9d573badc"},"source":["# print out the value for the 0 key\n","print(switchDict[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["off\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YlNPeURMKIuN","executionInfo":{"elapsed":135,"status":"ok","timestamp":1627913194301,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"f3bee913-bd93-432a-b161-dfb7543a3248"},"source":["# Here's another dictionary\n","countDict = {\"dozen\":12, \"baker's dozen\": 13, \"score\":20, \"one gross\":144}\n","print(countDict)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'dozen': 12, \"baker's dozen\": 13, 'score': 20, 'one gross': 144}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xtXn5ySmKIuN","executionInfo":{"elapsed":184,"status":"ok","timestamp":1627913199919,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"f619fec0-d57e-46de-a925-b9c1be26e6ed"},"source":["# Let's print out the value for the \"Score\" key:\n","print(countDict[\"score\"])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["20\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jS9x81v6KIuO"},"source":["You can add a new key/value pair to a dictionary:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s67xoEoyKIuP","executionInfo":{"elapsed":157,"status":"ok","timestamp":1627913205028,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"587f474e-bd2a-4297-d9b1-f6fdbab818f4"},"source":["countDict[\"half dozen\"] = 6\n","print(countDict)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'dozen': 12, \"baker's dozen\": 13, 'score': 20, 'one gross': 144, 'half dozen': 6}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yEhQWILFKIuQ"},"source":["You can also delete a key/value pair from a dictionary:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rWLNQnfzKIuQ","executionInfo":{"elapsed":161,"status":"ok","timestamp":1627913223185,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"2e1d96e4-e7dd-49df-9f17-847d45c95cc1"},"source":["del countDict[\"dozen\"]\n","print(countDict)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\"baker's dozen\": 13, 'score': 20, 'one gross': 144, 'half dozen': 6}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IB-nzRZmKIuR"},"source":["You can use dictionaries with other commands like conditionals:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ed0bmxNKKIuR","executionInfo":{"elapsed":178,"status":"ok","timestamp":1627913237604,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"ec5a007a-1a4b-4095-9cd6-c0b980c9e041"},"source":["if countDict[\"score\"] > 19:\n","    print(\"A score is greater than 19\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["A score is greater than 19\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XQ_MYrnaKIuS"},"source":["### Making the lab material dictionary\n","Create a dictionary with a key for the first three materials on the list (strawberries - dish soap). The values should be the reason we use that material:\n","\n","**Note: to make it easier to use your dictionary, keep all words lower case**"]},{"cell_type":"code","metadata":{"id":"gts4CvglKIuS"},"source":["materialsDict = {\"strawberries\": \"source of DNA\", \"water\": \"extracts the liquid\", \"dish soap\": \"helps to break down cells\"}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BWc56Dc6KIuT"},"source":["Print out the use of dish soap using your dictionary:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uvFtAvIDKIuT","executionInfo":{"elapsed":202,"status":"ok","timestamp":1627914518252,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"5b273506-cd1d-46f4-85b9-d458ff28d561"},"source":["print(materialsDict[\"dish soap\"])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["helps to break down cells\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Jx3WbsHOKIuT"},"source":["Add the next three lab materials to your dictionary:"]},{"cell_type":"code","metadata":{"id":"wspjs7JYKIuT"},"source":["materialsDict[\"meat tenderizer\"] = \"enzyme that cuts the protein\"\n","materialsDict[\"salt\"] = \"separates the DNA\"\n","materialsDict[\"rubbing alcohol\"] = \"removes DNA\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3KUPsjctKIuU"},"source":["print out your dictionary to check that you've added the new materials correctly:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cXpVDenkKIuU","executionInfo":{"elapsed":63,"status":"ok","timestamp":1627914521456,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"8d2401d8-f71a-43ce-cc09-9e7182f6a989"},"source":["print(materialsDict)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'strawberries': 'source of DNA', 'water': 'extracts the liquid', 'dish soap': 'helps to break down cells', 'meat tenderizer': 'enzyme that cuts the protein', 'salt': 'separates the DNA', 'rubbing alcohol': 'removes DNA'}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3xMjR-7PKIuU"},"source":["Now write a \"for loop\" that loops through the following list and prints out \"<item> is needed for the experiment\" if that item is in your dictionary and then prints out the use of that item."]},{"cell_type":"code","metadata":{"id":"fh5JfncDKIuU"},"source":["items = [\"apples\", \"water\", \"lemon juice\", \"vinegar\", \"salt\", \"dish soap\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"io_K1Rj0KIuU","executionInfo":{"elapsed":146,"status":"ok","timestamp":1627914541153,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"e67e3b18-f1db-4d87-e12c-179e0fa0d3fb"},"source":["# Hint: you can use \"if x in my_dictionary\" to check if something is in a dictionary\n","for i in items:\n","  if i in materialsDict:\n","    print(i, \"is needed for the experiment because it\", materialsDict[i])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["water is needed for the experiment because it extracts the liquid\n","salt is needed for the experiment because it separates the DNA\n","dish soap is needed for the experiment because it helps to break down cells\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YslIgpd9KIuV"},"source":["# ðŸŸ¢ Module 2: Transcribe and translate genetic information with Python!\n","\n","In this notebook you will learn how to write code that takes a DNA sequence and outputs the corresponding RNA sequence (transcription) and code that takes an RNA sequence and outputs the corresponding peptide sequence (translation)."]},{"cell_type":"markdown","metadata":{"id":"jIj_-6IhKIuX"},"source":["In the \"Central Dogma\" game you only transcribed and translated the first 10 codons of each protein. For this coding exercise you will use the entire DNA sequences (400-1,000 base pairs!). \n","<br>\n","<br>\n","The sequences are saved as text files so you will need to create a variable for each gene and use the open() function to assign each sequence to a variable. "]},{"cell_type":"code","metadata":{"collapsed":true,"id":"iXyij0dJKIua"},"source":["# Create a variable for each gene and read that file into the variable as a string\n","# You will need the open() function and the .read() method\n","\n","HisDNA = open(\"/content/drive/MyDrive/Colab Notebooks/Histamine_receptor_DNA.txt\").read()\n","\n","# Now open and read the sequence files for keratin and collagen:\n","\n","KerDNA = open(\"/content/drive/MyDrive/Colab Notebooks/Keratin_DNA.txt\").read()\n","ColDNA = open(\"/content/drive/MyDrive/Colab Notebooks/Collagen_DNA.txt\").read()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tqDiNYVPKIua"},"source":["Print out the data stored in the HisDNA variable:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fxFgMu9ZKIua","executionInfo":{"elapsed":161,"status":"ok","timestamp":1627917170235,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"36accda3-0c1e-4a74-8f6e-ab14e3897d1e"},"source":["print(HisDNA)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["TACCGTGGGTTACCGTGTCGGAGAAGGAAAACGGACCTGAGATGGCGTACGTTCTAGTGGTAGTGGCACCAGGAACGCCAGGAGTAGGAGTAGTGGCAACGACCGTTACACCAGCAGACAGACCGGCACCCGAACTTGGCGGCCGAGGCGTTGGACTGGTTAACAAAGTAGCACAGGAACCGATAGTGACTGGACGAGGAGCCGGAGGACCACGACGGGAAGAGACGGTAGATGGTCGACAGGACGTTCACCTCGAAACCGTTCCAGAAGACGTTATAGATGTGGTCGGACCTACACTACGAGACGTGTCGGAGGTAAGAATTGGAGAAGTACTAGTCGGAGCTGGCCATGACGCGACAGTACCTGGGTGACGCCATGGGACACGACCAGTGGGGTCAAGCCCAGCGGTAGAGAGACCAGAATTAAACCCAGTAGAGGTAATGGGACAGGAAAGACAGATAGGTGGACCCCACCTTGTCGTCCTTGCTCTGGTCGTTCCCGTTAGTATGGTGGAGATTCACGTTTCAGGTCCAGTTACTTCACATGCCCGACCACCTACCCGACCAGTGGAAGATGGAGGGCGATGACTAGTACACGTAGTGGATGATGGCGTAGAAGTTCCAGCGGGCCCTAGTCCGGTTCTCCTAGTTAGTGTAATCGAGGACCTTCCGTCGGTGGTAGTCCCTCGTGTTTCGGTGTCACTGTGACCGGCGGCAGTACCCCCGGAAGTAGTAGACGACCAAAGGGATGAAGTGGCGCAAACACATGGCACCCGACTCTCCCCTACTACGGTAGTTACTCCACAATCTTCGGTAGCAAGACACCGACCCGATACGGTTGAGTCGGGACTTGGGGTAGGACATACGACGCGACTTGTCTCTGAAGGCGTGGCCCATGGTTGTCGAGAAGACGACGTCCGACCGGTTGGCGTTGAGGGTGTTTTGAAGAGACTCCAGGTTGCGGAGAGTCGACAGGTCCTGGGTTTCGGCTCTTGGGTCCGTTGTCCTTCTCTTTGGGGACTTCGAGGTCCACACCTCACCCTGTCTTCAGTGCCGGGGGGTCCCTCGGTGTCTGTCCATT\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9n3_iuH8KIub"},"source":["Print out the datatype of this variable:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FUsfiENiKIub","executionInfo":{"elapsed":137,"status":"ok","timestamp":1627917314474,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"db865fc7-5bf7-4fa0-a09a-c2efef960100"},"source":["type(HisDNA)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"UG_YlUcvKIub"},"source":["Now that we've assigned our sequences to variables, we can get started on the code to transcribe that DNA sequence into an RNA sequence. \n","\n","**Store the histamine receptor RNA sequence in its own variable and print it out to check your results**\n","\n","Remember, A -> U, T -> A, G -> C, and C -> G"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VbZ7q3qsKIub","executionInfo":{"elapsed":132,"status":"ok","timestamp":1627917902257,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"33e9b055-5f76-4bd5-c877-0de62ddc428d"},"source":["# Hint: You will need a \"for loop\" and conditionals. \n","# You will also need an empty string\n","HisRNA = \"\"\n","\n","for base in HisDNA:\n","  if base == \"A\":\n","    HisRNA += \"U\"\n","  elif base == \"T\":\n","    HisRNA += \"A\"\n","  elif base == \"G\":\n","    HisRNA += \"C\"\n","  elif base == \"C\":\n","    HisRNA += \"G\"\n","\n","print(HisRNA)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["AUGGCACCCAAUGGCACAGCCUCUUCCUUUUGCCUGGACUCUACCGCAUGCAAGAUCACCAUCACCGUGGUCCUUGCGGUCCUCAUCCUCAUCACCGUUGCUGGCAAUGUGGUCGUCUGUCUGGCCGUGGGCUUGAACCGCCGGCUCCGCAACCUGACCAAUUGUUUCAUCGUGUCCUUGGCUAUCACUGACCUGCUCCUCGGCCUCCUGGUGCUGCCCUUCUCUGCCAUCUACCAGCUGUCCUGCAAGUGGAGCUUUGGCAAGGUCUUCUGCAAUAUCUACACCAGCCUGGAUGUGAUGCUCUGCACAGCCUCCAUUCUUAACCUCUUCAUGAUCAGCCUCGACCGGUACUGCGCUGUCAUGGACCCACUGCGGUACCCUGUGCUGGUCACCCCAGUUCGGGUCGCCAUCUCUCUGGUCUUAAUUUGGGUCAUCUCCAUUACCCUGUCCUUUCUGUCUAUCCACCUGGGGUGGAACAGCAGGAACGAGACCAGCAAGGGCAAUCAUACCACCUCUAAGUGCAAAGUCCAGGUCAAUGAAGUGUACGGGCUGGUGGAUGGGCUGGUCACCUUCUACCUCCCGCUACUGAUCAUGUGCAUCACCUACUACCGCAUCUUCAAGGUCGCCCGGGAUCAGGCCAAGAGGAUCAAUCACAUUAGCUCCUGGAAGGCAGCCACCAUCAGGGAGCACAAAGCCACAGUGACACUGGCCGCCGUCAUGGGGGCCUUCAUCAUCUGCUGGUUUCCCUACUUCACCGCGUUUGUGUACCGUGGGCUGAGAGGGGAUGAUGCCAUCAAUGAGGUGUUAGAAGCCAUCGUUCUGUGGCUGGGCUAUGCCAACUCAGCCCUGAACCCCAUCCUGUAUGCUGCGCUGAACAGAGACUUCCGCACCGGGUACCAACAGCUCUUCUGCUGCAGGCUGGCCAACCGCAACUCCCACAAAACUUCUCUGAGGUCCAACGCCUCUCAGCUGUCCAGGACCCAAAGCCGAGAACCCAGGCAACAGGAAGAGAAACCCCUGAAGCUCCAGGUGUGGAGUGGGACAGAAGUCACGGCCCCCCAGGGAGCCACAGACAGGUAA\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nhWPOPNdKIuc"},"source":["Congratulations! You've transcribed DNA sequences and created mRNA. Now it's time to translate that message and find the amino acid sequence of the protein.\n","<br>\n","<br>\n","Here's a chart to help you out:"]},{"cell_type":"markdown","metadata":{"id":"2ZNgNNzaKIuc"},"source":["<img src=\"https://archive.manylabs.org/file/lessonMedia/69/geneticCode.png\" width=\"500px\" height=\"500px\" align=\"left\" />"]},{"cell_type":"markdown","metadata":{"id":"b_jUxzCpKIuc"},"source":["**Goal:** You need to write code that takes an RNA sequence and returns the correct amino acid sequence. (Use the one letter code for amino acids (ex. L for Leucine). Stop codons can be represented as \"STOP\")\n","\n","**You may find it helpful to write some pseudocode to help you solve this challenge**\n","\n","Here are some hints:\n","- you will need a dictionary, a for loop, and a conditional"]},{"cell_type":"markdown","metadata":{"id":"_kjPzwBFKIud"},"source":["Create your dictionary first:"]},{"cell_type":"code","metadata":{"id":"Rb9vLJc_KIud"},"source":["codonDict = {\"UUU\":\"F\",\"UUC\":\"F\",\"UUA\":\"L\",\"UUG\":\"L\", \"CUU\":\"L\",\"CUC\":\"L\",\n","             \"CUA\":\"L\",\"CUG\":\"L\",\"AUU\":\"I\",\"AUC\":\"I\",\"AUA\":\"I\",\"AUG\":\"M\",\n","             \"GUU\":\"V\",\"GUC\":\"V\",\"GUA\":\"V\",\"GUG\":\"V\",\"UCU\":\"S\",\"UCC\":\"S\",\n","             \"UCA\":\"S\",\"UCG\":\"S\",\"CCU\":\"P\",\"CCC\":\"P\",\"CCA\":\"P\",\"CCG\":\"P\",\n","             \"ACU\":\"T\",\"ACC\":\"T\",\"ACA\":\"T\",\"ACG\":\"T\",\"GCU\":\"A\",\"GCC\":\"A\",\n","             \"GCA\":\"A\",\"GCG\":\"A\",\"UAU\":\"Y\",\"UAC\":\"Y\",\"UAA\":\"STOP\",\"UAG\":\"STOP\",\n","             \"UGA\":\"STOP\",\"CAU\":\"H\",\"CAC\":\"H\",\"CAA\":\"Q\",\"CAG\":\"Q\",\"AAU\":\"N\",\n","             \"AAC\":\"N\",\"AAA\":\"K\",\"AAG\":\"K\",\"GAU\":\"D\",\"GAC\":\"D\",\"GAA\":\"E\",\n","             \"GAG\":\"E\",\"UGU\":\"C\",\"UGC\":\"C\",\"UGG\":\"W\",\"CGU\":\"R\",\"CGC\":\"R\",\n","             \"CGA\":\"R\",\"CGG\":\"R\",\"AGU\":\"S\",\"AGC\":\"S\",\"AGA\":\"R\",\"AGG\":\"R\",\n","             \"GGU\":\"G\",\"GGC\":\"G\",\"GGA\":\"G\",\"GGG\":\"G\"}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Fmc3XiRmKIud"},"source":["Now write the rest of your code:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDABFhe0jBQ6","executionInfo":{"elapsed":133,"status":"ok","timestamp":1627919248330,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"cfaa1100-6ac4-42cc-b9cd-bf1304cf37b0"},"source":["protein = \"\"\n","codon = \"\"\n","for i in HisRNA:\n","    if len(codon) == 3:\n","        protein += codonDict[codon]\n","        codon = \"\"\n","        codon += i\n","    else:\n","        codon += i\n","print(protein)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MAPNGTASSFCLDSTACKITITVVLAVLILITVAGNVVVCLAVGLNRRLRNLTNCFIVSLAITDLLLGLLVLPFSAIYQLSCKWSFGKVFCNIYTSLDVMLCTASILNLFMISLDRYCAVMDPLRYPVLVTPVRVAISLVLIWVISITLSFLSIHLGWNSRNETSKGNHTTSKCKVQVNEVYGLVDGLVTFYLPLLIMCITYYRIFKVARDQAKRINHISSWKAATIREHKATVTLAAVMGAFIICWFPYFTAFVYRGLRGDDAINEVLEAIVLWLGYANSALNPILYAALNRDFRTGYQQLFCCRLANRNSHKTSLRSNASQLSRTQSREPRQQEEKPLKLQVWSGTEVTAPQGATDR\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KEYUgIOaKIue"},"source":["# ðŸŸ¢ Module 3: Dictionaries review\n","\n","These exercises will help you review the new data type of dictionaries. Try to complete these on your own first before looking at a cheat sheet."]},{"cell_type":"markdown","metadata":{"id":"Jp0vIh4SKIue"},"source":["### 1. Creating a dictionary\n","\n","Here is a sample sequence of DNA:\n","ACCCTGTAGCAGA\n","\n","Create a dictionary that contains each nucleotide as the key and the number of those nucleotides in the sequence as the value (you can just count by hand):"]},{"cell_type":"code","metadata":{"collapsed":true,"id":"TFnOlocYKIuf","executionInfo":{"status":"ok","timestamp":1628176138952,"user_tz":240,"elapsed":204,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}}},"source":["DNA = {\"A\":[1,8,11,13], \"C\":[2,3,4,10], \"T\":[5,7], \"G\":[6,9,12]}"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bMxVeWkDKIuf"},"source":["Print out the value associated with the key \"G\":"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"eGZ7si_BKIuf","executionInfo":{"status":"ok","timestamp":1628176139236,"user_tz":240,"elapsed":59,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"7cb628e1-e7ad-4b29-fcbc-917af6285a0d"},"source":["print(DNA[\"G\"])"],"execution_count":22,"outputs":[{"output_type":"stream","text":["[6, 9, 12]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8xDRbMgqKIuf"},"source":["### 2. Adding keys and values\n","\n","Add a key/value pair to your dictionary for the number of \"U\"s in the DNA sequence above:"]},{"cell_type":"code","metadata":{"collapsed":true,"id":"s3waUOOXKIug","executionInfo":{"status":"ok","timestamp":1628176140777,"user_tz":240,"elapsed":5,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}}},"source":["DNA[\"U\"] = [0]"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Tm6I5UrwKIug"},"source":["Print out your dictionary:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"9wv5KQDyKIug","executionInfo":{"status":"ok","timestamp":1628176140974,"user_tz":240,"elapsed":35,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"668617ec-32af-4bee-88ec-4745b4c75c0e"},"source":["print(DNA)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["{'A': [1, 8, 11, 13], 'C': [2, 3, 4, 10], 'T': [5, 7], 'G': [6, 9, 12], 'U': [0]}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H374N2ZjKIug"},"source":["### 3. Conditionals and dictionaries\n","\n","Write a conditional that checks whether there are more \"A\"s or \"T\"s in your sequence and prints out:\n","- \"There are more As\" or \"There are more Ts\"\n","- The difference (ie. how many more As or Ts there are)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"O0EUdnleKIug","executionInfo":{"status":"ok","timestamp":1628176142810,"user_tz":240,"elapsed":22,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"93c84470-f160-4784-91c4-e833492545b9"},"source":["A = len(DNA[\"A\"])\n","T = len(DNA[\"T\"])\n","\n","if A > T:\n","  print(\"There are more As.\")\n","elif A < T:\n","  print(\"There are more Ts.\")"],"execution_count":25,"outputs":[{"output_type":"stream","text":["There are more As.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"d7jgfS3cKIuh"},"source":["### 3. Loops and dictionaries\n","\n","Loop through all the keys in your dictionary and print out its value:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"ZQnTJynaKIuh","executionInfo":{"status":"ok","timestamp":1628176144345,"user_tz":240,"elapsed":161,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"ec65c929-1ce8-4157-e2dc-62c7085d6af1"},"source":["for i in DNA:\n","  print(DNA[i])"],"execution_count":26,"outputs":[{"output_type":"stream","text":["[1, 8, 11, 13]\n","[2, 3, 4, 10]\n","[5, 7]\n","[6, 9, 12]\n","[0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JLl8bw_QKIuh"},"source":["Now write a loop that only prints out the value if there are more than 0 nucleotides of that type in your sequence:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RFAh7KxiKIuh","executionInfo":{"status":"ok","timestamp":1628176192397,"user_tz":240,"elapsed":131,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"32a6f7b3-9c85-42ce-a47f-27f4c90feb95"},"source":["for i in DNA: \n","  if len(DNA[\"A\"]) > 0:\n","    print(DNA[\"A\"])\n","  if len(DNA[\"C\"]) > 0:\n","    print(DNA[\"C\"])\n","  if len(DNA[\"T\"]) > 0:\n","    print(DNA[\"T\"])\n","  if len(DNA[\"G\"]) > 0:\n","    print(DNA[\"G\"])\n","\n","#having trouble with this one"],"execution_count":29,"outputs":[{"output_type":"stream","text":["[1, 8, 11, 13]\n","[2, 3, 4, 10]\n","[5, 7]\n","[6, 9, 12]\n","[1, 8, 11, 13]\n","[2, 3, 4, 10]\n","[5, 7]\n","[6, 9, 12]\n","[1, 8, 11, 13]\n","[2, 3, 4, 10]\n","[5, 7]\n","[6, 9, 12]\n","[1, 8, 11, 13]\n","[2, 3, 4, 10]\n","[5, 7]\n","[6, 9, 12]\n","[1, 8, 11, 13]\n","[2, 3, 4, 10]\n","[5, 7]\n","[6, 9, 12]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6rpzQ5vYKIuh"},"source":["# ðŸŸ¢ Module 4: Exploring the hominid timeline\n","\n","In this notebook you'll get to practice creating and using dictionaries while discovering which hominin species lived at the same time."]},{"cell_type":"markdown","metadata":{"id":"K2TGWydnKIui"},"source":["Here is a list of hominid species and the time range when they are beleived to have lived (in millions of years ago):\n","- A. anamensis (4.2 to 3.9 mya)\n","- A. afarensis (3.6 to 2.9 mya)\n","- K. platyops (3.5 to 3.3 mya)\n","- A. africanus (3 to 2 mya)\n","- A. aethiopicus (2.7 to 2.3 mya)\n","- A. boisei (2.3 to 1.4 mya)\n","- H. habilis (2.3 to 1.6 mya)\n","- H. erectus (1.8 to 0.3 mya)\n","- A. robustus (1.8 to 1.5 mya)\n","- H. heidelbergensis (0.6 to 0.1 mya)\n","- H. neanderthalensis (0.25 to 0.03 mya)\n","- H. sapiens (0.1 to 0 mya)\n","\n","Create a dictionary with species as keys and lists containing the beginning and end of the range as the values:\n","\n","*Note: If your dictionary gets too long to fit on one line, you can hit the \"return\" key after a comma to make a new line*"]},{"cell_type":"code","metadata":{"id":"DL4otKJ1KIui"},"source":["hominidDict = {\"A. anamensis\": [4.2, 3.9], \"A. afarensis\": [3.6, 2.9], \"K. platyops\": [3.5, 3.3], \"A. africanus\": [3, 2], \"A. aethiopicus\": [2.7, 2.3], \n","               \"A. boisei\": [2.3, 1.4], \"H. habilis\": [2.3, 1.6], \"H. erectus\": [1.8, 0.3], \"A. robustus\": [1.8, 1.5], \"H. heidelbergensis\": [0.6, 0.1],\n","               \"H. neanderthalensis\": [0.25, 0.03], \"H. sapiens\": [0.1, 0]}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_IAaDPKAKIui"},"source":["Test out your dictionary by printing out the time range when A. boisei lived:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JlNfbNi8KIui","executionInfo":{"elapsed":122,"status":"ok","timestamp":1628003294245,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"8d2cfc0f-5e8a-4ab5-b8ca-38fb991ed0da"},"source":["print(hominidDict[\"A. boisei\"])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2.3, 1.4]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"i6jwJO2AKIui"},"source":["Now write code that sets a variable equal to a certain number of millions of years ago and prints out a **list** of all the hominid species that lived at that time:\n","\n","Hints: \n","- You will need to create a new list\n","- You will need to use a list index after a dictionary index\n","- Remember that the time ranges go from more mya to fewer mya"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KsOS3ngvKIuj","executionInfo":{"elapsed":93,"status":"ok","timestamp":1628003342964,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"b5bd41b2-fe28-4596-cc45-8d7350f205c2"},"source":["year = 0.1\n","timeRange = []\n","\n","for i in hominidDict:\n","  mya = hominidDict[i]\n","  if mya[0] >= year:\n","    if mya[1] <= year:\n","      timeRange.append(i)\n","\n","print(timeRange)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['H. heidelbergensis', 'H. neanderthalensis', 'H. sapiens']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HOM_6lf4KIuj"},"source":["Try re-running your code for the following numbers of millions of years:\n","- 3 mya\n","- 1.5 mya\n","- 0.1 mya (100 years ago)"]},{"cell_type":"markdown","metadata":{"id":"WERChBiNKIuj"},"source":["# ðŸŸ¢ Module 5: Identifying Butterfly Species\n","\n","In this notebook you will get to use your transcription and translation code to analyze the optix gene from four butterflies and find out which pairs are the same species!"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yf4bIgHbrdm-","executionInfo":{"elapsed":181,"status":"ok","timestamp":1628005439920,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"},"user_tz":240},"outputId":"97df8ec9-781c-4b2a-e96d-b90aee8394c6"},"source":["students = [\"Claire\", \"Bre\", \"Astrid\", \"Dalia\", \"Rashini\", \"Alicia\",\"Olivia\", \"Grace\"]\n","students_grades = [9, 10, 10, 10, 10, 11, 11, 11]\n","\n","for c, i in enumerate(students):\n","  print(i, \"is in \" + str(students_grades[c]) + \"th grade.\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Claire is in 9th grade.\n","Bre is in 10th grade.\n","Astrid is in 10th grade.\n","Dalia is in 10th grade.\n","Rashini is in 10th grade.\n","Alicia is in 11th grade.\n","Olivia is in 11th grade.\n","Grace is in 11th grade.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c0Cmp8DHKIuj"},"source":["### Step 1\n","Open the DNA sequence files for the two butterflies that you picked. Read them in as strings, and assign them to variables:"]},{"cell_type":"code","metadata":{"id":"suO3qW2UKIuk"},"source":["# You will need the open() function and the .read() method\n","butterflyB = open(\"/content/drive/MyDrive/Colab Notebooks/Butterfly_B_DNA.txt\").read()\n","butterflyD = open(\"/content/drive/MyDrive/Colab Notebooks/Butterfly_D_DNA.txt\").read()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vIKqrZjRKIuk"},"source":["Next, transcribe these sequences into RNA and assign each RNA sequence to a variable."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DY7IC3toKIuk","executionInfo":{"status":"ok","timestamp":1628171169868,"user_tz":240,"elapsed":17,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"fc21e11f-801b-4bb5-de14-7317e8ac96ea"},"source":["# Hint: You can copy and paste your transcription code\n","RNA_butterflyB = \"\"\n","RNA_butterflyD = \"\"\n","\n","for base in butterflyB:\n","  if base == \"A\":\n","    RNA_butterflyB += \"U\"\n","  elif base == \"T\":\n","    RNA_butterflyB += \"A\"\n","  elif base == \"G\":\n","    RNA_butterflyB += \"C\"\n","  elif base == \"C\":\n","    RNA_butterflyB += \"G\"\n","\n","for base in butterflyD:\n","  if base == \"A\":\n","    RNA_butterflyD += \"U\"\n","  elif base == \"T\":\n","    RNA_butterflyD += \"A\"\n","  elif base == \"G\":\n","    RNA_butterflyD += \"C\"\n","  elif base == \"C\":\n","    RNA_butterflyD += \"G\"\n","\n","print(RNA_butterflyD)\n","print(RNA_butterflyB)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CGGUUCCAGAGGUCCAGUCAUGCGAAAUUACAAGCCUUGUGGCUGGAGGCGCACUAUCAGGAGGCCGAGCGUCUCCGUGGCCGCCCUCUCGGUCCGGUCGACAAAUAUCGUGUGCGGAAGAAGUUCCCCCUGCCUCGAACAAUCUGGGACGGCGAACAAAAGACACACUGUUUCAAGGAGAGAACGAGGUCGCUCCUGAGGGAAUGGUACCUACAAGAUCCUUACCCGAACCCGACGAAGAAGCGAGAAUUGGCCGCGGCGACGGGUCUGACGCCGACGCAGGUCGGCAACUGGUUCAAGAACCGGCGGCAGCGGGACAGAGCAGCCGCCGCUAAGAACCGCUCCGCCGUACUCGGCCGAGGAUUCGCCUCUUCCUCCACCUACGACGAGGACUCCGCCGACUCAGAGAUCAACGUGGACGAGGAG\n","CGGUUCCAGAGGUCCAGUCAUGCGAAACUACAAGCCUUGUGGCUGGAGGCGCACUAUCAGGAGGCCGAGCGCCUCCGCGGCCGCCCUCUCGGUCCGGUCGACAAAUAUCGUGUGCGGAAGAAGUUUCCCCUGCCGCGAACAAUCUGGGACGGCGAACAAAAGACACACUGUUUCAAGGAGAGGACGAGGUCGCUCCUGAGGGAAUGGUACCUACAAGACCCUUACCCGAACCCGACGAAGAAGCGGGAAUUGGCCGCGGCGACGGGUCUGACGCCGACGCAGGUCGGCAACUGGUUCAAAAACCGGCGGCAGCGGGACAGAGCAGCCGCCGCUAAGAACCGCUCCGCCGUGCUCGGCCGAGGGUUCGCCUCCUCCUCCACCUAUGACGAGGACUCCGCCGACUCAGAGAUCAACGUGGACGAGGAG\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yXWHs59HKIuk"},"source":["Now find the amino acid sequence for each butterfly and store it in a variable:"]},{"cell_type":"code","metadata":{"id":"gWAZFXQ0KIul"},"source":["# Hint: You will need to use your translation code\n","codonDict = {\"UUU\":\"F\",\"UUC\":\"F\",\"UUA\":\"L\",\"UUG\":\"L\", \"CUU\":\"L\",\"CUC\":\"L\",\n","             \"CUA\":\"L\",\"CUG\":\"L\",\"AUU\":\"I\",\"AUC\":\"I\",\"AUA\":\"I\",\"AUG\":\"M\",\n","             \"GUU\":\"V\",\"GUC\":\"V\",\"GUA\":\"V\",\"GUG\":\"V\",\"UCU\":\"S\",\"UCC\":\"S\",\n","             \"UCA\":\"S\",\"UCG\":\"S\",\"CCU\":\"P\",\"CCC\":\"P\",\"CCA\":\"P\",\"CCG\":\"P\",\n","             \"ACU\":\"T\",\"ACC\":\"T\",\"ACA\":\"T\",\"ACG\":\"T\",\"GCU\":\"A\",\"GCC\":\"A\",\n","             \"GCA\":\"A\",\"GCG\":\"A\",\"UAU\":\"Y\",\"UAC\":\"Y\",\"UAA\":\"STOP\",\"UAG\":\"STOP\",\n","             \"UGA\":\"STOP\",\"CAU\":\"H\",\"CAC\":\"H\",\"CAA\":\"Q\",\"CAG\":\"Q\",\"AAU\":\"N\",\n","             \"AAC\":\"N\",\"AAA\":\"K\",\"AAG\":\"K\",\"GAU\":\"D\",\"GAC\":\"D\",\"GAA\":\"E\",\n","             \"GAG\":\"E\",\"UGU\":\"C\",\"UGC\":\"C\",\"UGG\":\"W\",\"CGU\":\"R\",\"CGC\":\"R\",\n","             \"CGA\":\"R\",\"CGG\":\"R\",\"AGU\":\"S\",\"AGC\":\"S\",\"AGA\":\"R\",\"AGG\":\"R\",\n","             \"GGU\":\"G\",\"GGC\":\"G\",\"GGA\":\"G\",\"GGG\":\"G\"}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"isr-11afKIul"},"source":["proteinB = \"\"\n","codon = \"\"\n","for i in RNA_butterflyB:\n","    if len(codon) == 3:\n","        proteinB += codonDict[codon]\n","        codon = \"\"\n","        codon += i\n","    else:\n","        codon += i\n","\n","proteinD = \"\"\n","codon = \"\"\n","for i in RNA_butterflyD:\n","    if len(codon) == 3:\n","        proteinD += codonDict[codon]\n","        codon = \"\"\n","        codon += i\n","    else:\n","        codon += i"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5cJkNLyVKIum"},"source":["Print out your protein sequences to make sure your code worked:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t0Jh3g9BKIun","executionInfo":{"status":"ok","timestamp":1628172097965,"user_tz":240,"elapsed":157,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"069799a2-8a4a-42dd-92d0-84b6e0d9c1a9"},"source":["print(proteinB)\n","print(proteinD)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["RFQRSSHAKLQALWLEAHYQEAERLRGRPLGPVDKYRVRKKFPLPRTIWDGEQKTHCFKERTRSLLREWYLQDPYPNPTKKRELAAATGLTPTQVGNWFKNRRQRDRAAAAKNRSAVLGRGFASSSTYDEDSADSEINVDE\n","RFQRSSHAKLQALWLEAHYQEAERLRGRPLGPVDKYRVRKKFPLPRTIWDGEQKTHCFKERTRSLLREWYLQDPYPNPTKKRELAAATGLTPTQVGNWFKNRRQRDRAAAAKNRSAVLGRGFASSSTYDEDSADSEINVDE\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SCAM1_FjKIun"},"source":["### Step 2\n","How can we find out how many differences there are between each pair of protein sequences? \n","Write code that compares your two sequences and prints out the number of differences:"]},{"cell_type":"code","metadata":{"id":"Ys6cjcNeKIuo"},"source":["# Hint, you will need the enumerate() function. You can use this in \"for loops\" that loop through strings or lists.\n","# Remember, you must specify two variables in your \"for loop\": one for the index counter and one for the character.\n","numDifferences = 0\n","for c, i in enumerate(proteinB):\n","  if proteinD[c] != 1:\n","    numDifferences += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZX-PyuJnnWky","executionInfo":{"status":"ok","timestamp":1628172284172,"user_tz":240,"elapsed":12,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"3cc83e17-a630-4fac-b530-461f0d9cfd9f"},"source":["print(numDifferences)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["141\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zi-WliQdKIuo"},"source":["If you got 0 differences, that's correct! But don't be too hasty in assuming that these butterflies are from the same species. Let's check the DNA sequences to be sure.\n","\n","### Step 3\n","\n","Try reusing your code to compare the DNA sequences instead of the protein sequences:"]},{"cell_type":"code","metadata":{"id":"Au5MMyQ7KIup"},"source":["# You can copy and paste code from above and then modify it.\n","numDifferences = 0\n","for c, i in enumerate(butterflyB):\n","  if butterflyD[c] != 1:\n","    numDifferences += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SakHoXHzobnN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628172310229,"user_tz":240,"elapsed":136,"user":{"displayName":"Damaris Lindsay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiRKSf7QbXpkeRZ_hoxQazWgbyAQFtfnFZ0vqnNNw=s64","userId":"04625720101609935783"}},"outputId":"66292555-dbda-47be-a1ce-fb4dd1510c14"},"source":["print(numDifferences)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["426\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pNDOl3sPKIur"},"source":["Compare with other teams to see which two butterflies are from the same species."]},{"cell_type":"markdown","metadata":{"id":"PbmAwRdAKIus"},"source":["## Exploring SNPs\n","### Step 4\n","These DNA differences are actually known variations between species. Called \"single nucleotide polymorphisms\" or SNPs, they can be used to identify a particular species. \n","\n","Using the two dictionaries below, write code that looks at position 213 to find out whether the butterflies you're looking at are melpomene or erato:\n","\n","Hint: DNA basepairs count from 1 and python counts from 0"]},{"cell_type":"code","metadata":{"id":"t9XkjIdgKIus"},"source":["# melpomene and erato are two Heliconius butterfly species\n","# These dictionaries have the DNA basepair # as the key and the chemical base as the value\n","\n","melpomene = {36:\"A\", 156:\"C\", 177:\"T\", 213:\"C\", 276:\"A\", 291:\"A\", 315:\"A\", 333:\"G\", 405:\"C\"}\n","erato = {36:\"G\", 156:\"T\", 177:\"C\", 213:\"T\", 276:\"C\", 291:\"G\", 315:\"C\", 333:\"A\", 405:\"T\"}\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FpeCAMboKIut"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7Fb-q8ENKIut"},"source":["Try changing the code to look at a different basepair position:"]},{"cell_type":"code","metadata":{"id":"w0plh8TwKIuv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zMCH7FKVKIuv"},"source":["# ðŸŸ¢ Module 6: The Cultural-Societal Impact Researching Sickle Cell Anemia \n","\n","Use your transcription and translation code to find the amino acid sequence for hemoglobin samples 1-4 (each person in the group should look at a different sequence). Compare your results to determine which sequence has the mutation. "]},{"cell_type":"code","metadata":{"id":"0W8d7XufKIuv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bw7Xk4B2KIuw"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FBkH5d3JKIuw"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mfigjXbjKIuw"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t_rS6yKYKIuw"},"source":["Once a person decides to proceed with genetic testing, a medical geneticist, primary\n","caredoctor, specialist, or nurse practitioner can order the test. Genetic testing is often\n","done as part of a genetic consultation.\n","\n","Genetic tests are performed on a sample of blood, hair, skin, amniotic fluid (the fluid that\n","surrounds a fetus during pregnancy), or other tissue. For example, a procedure called a\n","buccal smear uses a small brush or cotton swab to collect a sample of cells from the\n","inside surface of the cheek. The sample is sent to a laboratory where technicians look\n","for specific changes in chromosomes, DNA, or proteins, depending on the suspected\n","disorder. The laboratory reports the test results in writing to a person's doctor or genetic\n","counselor, or directly to the patient if requested.\n","\n","Newborn screening tests are done on a small blood sample, which is taken by pricking\n","the baby's heel. Unlike other types of genetic testing, a parent will usually only receive\n","the result if it is positive. If the test result is positive, additional testing is needed to\n","determine whether the baby has a genetic disorder.\n","Before a person has a genetic test, it is important that he or she understands the testing\n","procedure, the benefits and limitations of the test, and the possible consequences of the\n","test results. The process of educating a person about the test and obtaining permission\n","is called **informed consent**.\n","\n","Edit this text cell to answer the following questions:\n","\n","1. What were the research practices done to collect information about sickle cell anemia in Africa?\n","\n","2. Were these research practices ethical?\n","\n","3. What can we do with computer science to ensure that individuals' rights are protected?\n"]},{"cell_type":"code","metadata":{"id":"a7IyvhN-KIuy"},"source":[""],"execution_count":null,"outputs":[]}]}